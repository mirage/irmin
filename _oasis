OASISFormat: 0.4
Name:        irmin
Version:     0.9.5
Synopsis:    A Distributed Version Control Database
Authors:     Thomas Gazagnaire
License:     ISC
Plugins:     META (0.4), DevFiles (0.4)
BuildTools:  ocamlbuild

Flag unix
  Description: build the unix libraries
  Default: true

Flag http
  Description: build the http libraries
  Default: true

Flag git
  Description: build the git libraries
  Default: true

Flag examples
  Description: build the examples
  Default: false

Library irmin
  Path:            lib/
  Findlibname:     irmin
  InternalModules: Ir_misc, Ir_graph, Ir_hash, Ir_snapshot, Ir_slice,
                   Ir_ro, Ir_ao, Ir_rw, Ir_conf, Ir_s, Ir_lock,
                   Ir_commit, Ir_tag, Ir_contents, Ir_hum,
                   Ir_node, Ir_version, Ir_dot, Ir_path, Ir_watch,
                   Ir_merge, Ir_view, Ir_task, Ir_bc, Ir_sync, Ir_sync_ext
  Modules:         Irmin
  BuildDepends:    ezjsonm, ocamlgraph, lwt, dolog, cstruct, tc,
                   mstruct, uri, stringext, hex

Library "irmin-mem"
  Path:          lib/mem
  Findlibname:   mem
  FindlibParent: irmin
  BuildDepends:  irmin
  Modules:       Irmin_mem

Library "irmin-git"
  Build$:        flag(git)
  Install$:      flag(git)
  Path:          lib/git
  Findlibname:   git
  FindlibParent: irmin
  BuildDepends:  irmin, git
  Modules:       Irmin_git

Library "irmin-fs"
  Path:          lib/fs
  Findlibname:   fs
  FindlibParent: irmin
  BuildDepends:  irmin
  Modules:       Irmin_fs

Library "irmin-http"
  Build$:          flag(http)
  Install$:        flag(http)
  Path:            lib/http
  Findlibname:     http
  FindlibParent:   irmin
  BuildDepends:    irmin, cohttp.lwt-core, ezjsonm.lwt, re, re.pcre, re.perl
  InternalModules: Irmin_http_static
  Modules:         Irmin_http, Irmin_http_server

Library "irmin-unix"
  Build$:        flag(unix) && flag(http) && flag(git)
  Install$:      flag(unix) && flag(http) && flag(git)
  Path:          lib/unix
  Findlibname:   unix
  FindlibParent: irmin
  BuildDepends:  irmin, irmin.mem, irmin.git, irmin.fs, irmin.http,
                 git.unix, cohttp.lwt
  Modules:       Irmin_unix

Document irmin
  Title:                Irmin docs
  Type:                 OCamlbuild (0.4)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      lib/
  XOCamlbuildLibraries: irmin, irmin.mem, irmin.unix

Executable irmin
  Build$:         flag(unix) && flag(http) && flag(git)
  Install$:       flag(unix) && flag(http) && flag(git)
  Path:           bin/
  MainIs:         main.ml
  CompiledObject: best
  BuildDepends:   cmdliner, irmin, irmin.mem, irmin.unix

Executable test_irmin
  Path:           lib_test
  MainIs:         test.ml
  Build$:         flag(tests) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.mem, irmin.unix, alcotest, nocrypto

Test test_irmin
  Run$:             flag(tests) && flag(unix) && flag(http) && flag(git)
  Command:          $test_irmin -q
  WorkingDirectory: lib_test

Executable test_git_store
  Path:           examples/
  MainIs:         git_store.ml
  Build$:         flag(examples) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.unix

Executable test_custom_merge
  Path:           examples/
  MainIs:         custom_merge.ml
  Build$:         flag(examples) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.unix

Executable test_views
  Path:           examples/
  MainIs:         views.ml
  Build$:         flag(examples) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.unix

Executable test_contatcs
  Path:           examples/
  MainIs:         contacts.ml
  Build$:         flag(examples) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.unix

Executable test_intrusion
  Path:           examples/
  MainIs:         intrusion.ml
  Build$:         flag(examples) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.unix

Executable test_process
  Path:           examples/
  MainIs:         process.ml
  Build$:         flag(examples) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.unix

Executable test_sync
  Path:           examples/
  MainIs:         sync.ml
  Build$:         flag(examples) && flag(unix) && flag(http) && flag(git)
  CompiledObject: best
  Install:        false
  BuildDepends:   irmin, irmin.unix
