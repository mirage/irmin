OASISFormat: 0.4
Name:        irmin
Version:     0.8.1
Synopsis:    A Distributed Version Control Database
Authors:     Thomas Gazagnaire
License:     ISC
Plugins:     META (0.4), DevFiles (0.4)
BuildTools:  ocamlbuild

AlphaFeatures: pure_interface

Flag xen
  Description: build the Xen library
  Default: false

Flag git
  Description: build the Git backend
  Default: true

Flag unix
  Description: build the Unix library
  Default: true

Flag examples
  Description: build the examples
  Default: false

Library irmin
  Path: lib/core
  Findlibname: irmin
  Modules: Irmin, IrminGraph, IrminKey, IrminSnapshot,
           IrminMisc, IrminCommit, IrminStore, IrminBlock,
           IrminTag, IrminContents, IrminNode, IrminVersion,
           IrminDump, IrminPath, IrminWatch, IrminMerge, IrminView,
           IrminOrigin, IrminIdent, IrminBranch
  BuildDepends: ezjsonm, ocamlgraph, lwt, sha,
                re.perl, re.pcre, dolog, mstruct,
                core_kernel, bin_prot.syntax, comparelib.syntax, sexplib.syntax
  ByteOpt: -bin-annot
  NativeOpt: -bin-annot
  XMETARequires: ezjsonm, ocamlgraph, lwt, sha,
                 re.perl, re.pcre, dolog, mstruct, core_kernel

Library backend
  Path: lib/backend
  Findlibname: backend
  FindlibParent: irmin
  BuildDepends: irmin, uri, cohttp.lwt, ezjsonm.lwt, git.memory, git.unix
  Modules: IrminCRUD, IrminMemory, IrminGit
  ByteOpt: -bin-annot
  NativeOpt: -bin-annot

Library fs
  Build$: flag(unix)
  Install$: flag(unix)
  Path: lib/backend
  Findlibname: fs
  FindlibParent: backend
  BuildDepends: lwt.unix, uri, irmin.backend, irmin
  Modules: IrminFS
  ByteOpt: -bin-annot
  NativeOpt: -bin-annot

Library server
  Build$: flag(unix) && flag(git)
  Install$: flag(unix) && flag(git)
  Path: lib/server
  Findlibname: server
  FindlibParent: irmin
  BuildDepends: cohttp.lwt, unix, lwt.unix, lwt.ssl,
                irmin.backend.fs, irmin.backend, irmin
  Modules: IrminHTTP, IrminHTTPStatic
  ByteOpt: -bin-annot
  NativeOpt: -bin-annot

Document irmin
  Title:                Irmin docs
  Type:                 OCamlbuild (0.4)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      lib/core
  XOCamlbuildLibraries: irmin

Document backend
  Title:                Irmin backends docs
  Type:                 OCamlbuild (0.4)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      lib/backend
  XOCamlbuildLibraries: irmin.backend, irmin.backend.fs

Executable irmin
  Path:               lib/driver
  MainIs:             irminMain.ml
  Build$:             flag(unix)
  CompiledObject:     best
  Install:            true
  BuildDepends:       cmdliner, irmin.backend.fs, git.fs,
                      irmin.backend, irmin.server, irmin

Executable test_irmin
  Path:               lib_test
  MainIs:             test.ml
  Build$:             flag(tests) && flag(unix)
  CompiledObject:     best
  Install:            false
  BuildDepends:       irmin, irmin.backend, irmin.backend.fs, alcotest, irmin.server, git.fs

Test test_irmin
  Run$:               flag(tests) && flag(unix)
  Command:            $test_irmin -q
  WorkingDirectory:   lib_test

Executable test_git_store
  Path:               examples/
  MainIs:             git_store.ml
  Build$:             flag(unix) & flag(examples)
  CompiledObject:     best
  Install:            false
  BuildDepends:       irmin, irmin.backend, irmin.backend.fs, git.fs

Executable test_custom_merge
  Path:               examples/
  MainIs:             custom_merge.ml
  Build$:             flag(unix) & flag(examples)
  CompiledObject:     best
  Install:            false
  BuildDepends:       irmin, irmin.backend, irmin.backend.fs, git.fs

Executable test_views
  Path:               examples/
  MainIs:             views.ml
  Build$:             flag(unix) & flag(examples)
  CompiledObject:     best
  Install:            false
  BuildDepends:       irmin, irmin.backend, irmin.backend.fs, git.fs

Executable test_contatcs
  Path:               examples/
  MainIs:             contacts.ml
  Build$:             flag(unix) & flag(examples)
  CompiledObject:     best
  Install:            false
  BuildDepends:       irmin, irmin.backend, irmin.backend.fs, git.fs

Executable test_intrusion
  Path:               examples/
  MainIs:             intrusion.ml
  Build$:             flag(unix) & flag(examples)
  CompiledObject:     best
  Install:            false
  BuildDepends:       irmin, irmin.backend, irmin.backend.fs, git.fs

Executable test_process
  Path:               examples/
  MainIs:             process.ml
  Build$:             flag(unix) & flag(examples)
  CompiledObject:     best
  Install:            false
  BuildDepends:       irmin, irmin.backend, irmin.backend.fs, git.fs
